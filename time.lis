     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Assignment 5".  This program greets calculates how long  *
     3                                  ;it takes a marble from a give height to fall to the earth.
     4                                  ;  Copyright (C) 2021  Gabriel Gamboa                                                                                 *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    13                                  ;Author information
    14                                  ;  Author name: Gabriel Gamboa
    15                                  ;  Author email: gabe04@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ; Program name: Assignment 5
    19                                  ;  Programming languages X86 with one module in C and one module in C++
    20                                  ;  Date program began 2021-Dec-05
    21                                  ;  Date program completed 2021-Dec-14
    22                                  ;
    23                                  ;Purpose
    24                                  ;  This program takes in a given height of a marble from the earth
    25                                  ;  and calculates how long it takes to reach the earth if dropped.
    26                                  ;  Value is returned in both tics and nanoseconds.
    27                                  ;Project information
    28                                  ;  Files: clocks.c, isfloat.cpp, time.asm, clock_speed.asm, r.sh, rg.sh
    29                                  ;  Status: The program has been tested extensively with no detectable errors.
    30                                  ;
    31                                  ;Translator information
    32                                  ;  Linux: nasm -f elf64 -l time.lis -o time.o time.asm
    33                                  
    34                                  
    35                                  ;============================================================================================================================================================
    36                                  
    37                                  
    38                                  ;===== Begin code area ============================================================================================================
    39                                  extern printf
    40                                  extern scanf
    41                                  extern fgets
    42                                  extern strlen
    43                                  extern stdin
    44                                  extern atof
    45                                  extern ispositivefloat
    46                                  extern getfreq
    47                                  extern clock_speed
    48                                  global execution
    49                                  
    50                                  
    51                                  segment .data
    52                                  align 16
    53 00000000 546865206375727265-     clock_time db "The current clock time is %ld tics", 10, 0
    53 00000009 6E7420636C6F636B20-
    53 00000012 74696D652069732025-
    53 0000001B 6C6420746963730A00 
    54 00000024 4761627269656C2077-     farewell_message db "Gabriel wishes you a Nice Day.", 10, 0
    54 0000002D 697368657320796F75-
    54 00000036 2061204E6963652044-
    54 0000003F 61792E0A00         
    55 00000044 496E76616C69642069-     mess db "Invalid input detected.  You may run this program again", 10, 0
    55 0000004D 6E7075742064657465-
    55 00000056 637465642E2020596F-
    55 0000005F 75206D61792072756E-
    55 00000068 20746869732070726F-
    55 00000071 6772616D2061676169-
    55 0000007A 6E0A00             
    56 0000007D 506C6561736520656E-     heightprompt db "Please enter the height in meters of the dropped marble: ", 0
    56 00000086 746572207468652068-
    56 0000008F 656967687420696E20-
    56 00000098 6D6574657273206F66-
    56 000000A1 207468652064726F70-
    56 000000AA 706564206D6172626C-
    56 000000B3 653A2000           
    57 000000B7 546865206D6172626C-     marble_time db "The marble will reach the earth after %20.20lf seconds.", 10, 0
    57 000000C0 652077696C6C207265-
    57 000000C9 616368207468652065-
    57 000000D2 617274682061667465-
    57 000000DB 72202532302E32306C-
    57 000000E4 66207365636F6E6473-
    57 000000ED 2E0A00             
    58 000000F0 546865206578656375-     exec_time db "The execution time was %ld tics which equals %20.20lf ns", 10, 0
    58 000000F9 74696F6E2074696D65-
    58 00000102 2077617320256C6420-
    58 0000010B 746963732077686963-
    58 00000114 6820657175616C7320-
    58 0000011D 2532302E32306C6620-
    58 00000126 6E730A00           
    59 0000012A 257300                  stringform db "%s", 0
    60                                  
    61 0000012D 90<rep 13h>             align 64
    62                                  segment .bss  ;Reserved for uninitialized data
    63                                  
    64 00000000 <res 100h>              programmers_name resb 256                  ;256 byte space created
    65 00000100 <res 100h>              height_string resb 256                        ;256 byte space created
    66                                  
    67                                  
    68                                  segment .text ;Reserved for executing instructions.
    69                                  
    70                                  execution:
    71                                  
    72                                  ;=============================================================================================
    73                                  ;back up data in registers
    74 00000000 55                      push rbp
    75 00000001 4889E5                  mov  rbp,rsp
    76 00000004 57                      push rdi                                                    ;Backup rdi
    77 00000005 56                      push rsi                                                    ;Backup rsi
    78 00000006 52                      push rdx                                                    ;Backup rdx
    79 00000007 51                      push rcx                                                    ;Backup rcx
    80 00000008 4150                    push r8                                                     ;Backup r8
    81 0000000A 4151                    push r9                                                     ;Backup r9
    82 0000000C 4152                    push r10                                                    ;Backup r10
    83 0000000E 4153                    push r11                                                    ;Backup r11
    84 00000010 4154                    push r12                                                    ;Backup r12
    85 00000012 4155                    push r13                                                    ;Backup r13
    86 00000014 4156                    push r14                                                    ;Backup r14
    87 00000016 4157                    push r15                                                    ;Backup r15
    88 00000018 53                      push rbx                                                    ;Backup rbx
    89 00000019 9C                      pushf                                                       ;Backup rflags
    90                                  
    91                                  
    92                                  
    93                                  ;======Get clock time ========================================================================================================================
    94                                  
    95                                  ;this gets information about the clock
    96                                  ;info stored is clock_time in tics
    97 0000001A B800000000              mov rax, 0
    98 0000001F BA00000000              mov rdx, 0
    99                                  
   100 00000024 0FA2                    cpuid                              ; Identifies the type of cpu being used on pc.
   101 00000026 0F31                    rdtsc                              ; Counts the number of cycles/tics occured since pc reset.
   102                                  
   103 00000028 48C1E220                shl rdx, 32
   104 0000002C 4801D0                  add rax, rdx            ;info stored here in rax is clock_time (value) in tics
   105 0000002F 4989C6                  mov r14, rax
   106                                  
   107                                  
   108                                  
   109                                  ;====================================================================================================================================================
   110                                  
   111 00000032 B800000000              mov rax, 0
   112 00000037 48BF-                   mov rdi, clock_time               ;"The current clock time is tics"
   112 00000039 [0000000000000000] 
   113 00000041 4C89F6                  mov rsi, r14
   114 00000044 E8(00000000)            call printf
   115                                  
   116                                  
   117                                  
   118                                  ;===================Prompt user for marble height ===================================================================================================================================================
   119                                  
   120 00000049 B800000000              mov rax, 0                            ;format for printf, no floats used
   121 0000004E 48BF-                   mov rdi, heightprompt                 ;"Please enter the height in meters of the dropped marble: "
   121 00000050 [7D00000000000000] 
   122 00000058 E8(00000000)            call printf
   123                                  
   124                                  
   125                                  ;===== Obtain the marble height value and validate=============================================================================================================================================
   126                                  
   127                                  ;set up scanf for height_string
   128 0000005D B800000000              mov rax, 0
   129 00000062 48BF-                   mov rdi, stringform
   129 00000064 [2A01000000000000] 
   130 0000006C 48BE-                   mov rsi, height_string
   130 0000006E [0001000000000000] 
   131 00000076 E8(00000000)            call scanf
   132                                  
   133                                  
   134                                  ;check input value for float
   135                                  ;mov rax, 0
   136                                  ;mov rdi, height_string
   137                                  ;call ispositivefloat
   138 0000007B 4989C5                  mov r13, rax            ;r15 {0 is invalid, 1 is valid}
   139                                  
   140                                  ;check whether input is valid or not
   141 0000007E 4983FD00                cmp r13, 0
   142 00000082 7522                    jne validprocess
   143                                  
   144                                  ;message run again
   145 00000084 B800000000              mov rax, 0
   146 00000089 48BF-                   mov rdi, mess       ;"Invalid input detected.  You may run this program again"
   146 0000008B [4400000000000000] 
   147 00000093 E8(00000000)            call printf
   148                                  
   149                                  ;create -1.0 to return to driver for invalid inputs
   150 00000098 6AFF                    push qword -1
   151 0000009A F2440F2A3424            cvtsi2sd xmm14, [rsp]   ;convert -1 to -1.0 and store it in xmmm15
   152 000000A0 58                      pop rax
   153                                  
   154 000000A1 E9ED000000              jmp continue
   155                                  
   156                                  ;if valid, convert string to float
   157                                  validprocess:
   158 000000A6 B800000000              mov rax, 0
   159 000000AB 48BF-                   mov rdi, height_string        ;mov height_string to rdi and convert it to a float
   159 000000AD [0001000000000000] 
   160 000000B5 E8(00000000)            call atof
   161 000000BA F2440F10F8              movsd xmm15, xmm0
   162                                  ;Done w/ input data validation
   163                                  
   164                                  ;============================================================================================================================================================================================
   165                                  
   166                                  
   167                                  ;============= Begin arithmetic section  ===============================================================
   168                                  ;divide 98 by 10 to get 9.8 needed in formula
   169 000000BF 6A62                    push qword 98
   170 000000C1 F2440F2A3424            cvtsi2sd xmm14, [rsp]   ;convert 98 to 98.0 and store it in xmmm15
   171 000000C7 58                      pop rax
   172                                  
   173                                  ;push 10 to divide 98 by it to get 9.8 needed in formula
   174 000000C8 6A0A                    push qword 10
   175 000000CA F2440F2A2C24            cvtsi2sd xmm13, [rsp]   ;convert 10 to 10.0 and store it in xmmm15
   176 000000D0 58                      pop rax
   177                                  
   178                                  ;divide 98 by 10 and store it in xmm14
   179 000000D1 F2450F5EF5              divsd xmm14, xmm13      ;xmm14 contains 9.8
   180                                  
   181                                  ;push 2 onto stack to convert to 2.0 and use 2.0 neeeded in formula
   182 000000D6 6A02                    push qword 2
   183 000000D8 F2440F2A2C24            cvtsi2sd xmm13, [rsp]   ;convert 2 to 2.0 and store it in xmm13
   184 000000DE 58                      pop rax
   185                                  
   186                                  ;do calculations of how long it will take marble to reach earth from height
   187                                  ;and print out
   188 000000DF B801000000              mov rax, 1              ;1 floating point number will be passed into printf
   189 000000E4 48BF-                   mov rdi, marble_time     ;"The marble will reach the earth after %5.9lf seconds."
   189 000000E6 [B700000000000000] 
   190 000000EE F2450F5EF5              divsd xmm14, xmm13       ; xmm14 is divided by 2.0, and answer is stored in xmm14
   191 000000F3 F2450F5EFE              divsd xmm15, xmm14       ;Meters inputted is divided by G/2 and stored in xmm15
   192 000000F8 F2450F51FF              sqrtsd xmm15, xmm15       ;sqrt of xmm15 is taken and stored in xmm15 (time in secs to reach earth)
   193 000000FD F2410F10C7              movsd xmm0, xmm15
   194 00000102 E8(00000000)            call printf
   195                                  ;pop rax
   196                                  
   197                                  
   198                                  ;============= End of arightmetic section ==============================================================
   199                                  
   200                                  ;======Get clock time ========================================================================================================================
   201                                  
   202                                  ;this gets information about the clock
   203                                  ;info stored is clock_time in tics
   204 00000107 B800000000              mov rax, 0
   205 0000010C BA00000000              mov rdx, 0
   206                                  
   207 00000111 0FA2                    cpuid                              ; Identifies the type of cpu being used on pc.
   208 00000113 0F31                    rdtsc                              ; Counts the number of cycles/tics occured since pc reset.
   209                                  
   210 00000115 48C1E220                shl rdx, 32
   211 00000119 4801D0                  add rax, rdx                      ;info stored here in rax is clock_time (value) in tics
   212 0000011C 4989C7                  mov r15, rax
   213                                  
   214                                  ;====================================================================================================================================================
   215                                  
   216                                  ;output current clock time in tics
   217 0000011F B800000000              mov rax, 0
   218 00000124 48BF-                   mov rdi, clock_time             ;"The current clock time is %ld tics"
   218 00000126 [0000000000000000] 
   219 0000012E 4C89FE                  mov rsi, r15                    ;r15 has clock time in tics
   220 00000131 E8(00000000)            call printf
   221                                  
   222                                  ;====================================================================================================================================================
   223                                  
   224                                  ;call clock_speed to get value of processor in GHz
   225                                  ;we wiil use this to convert our exectution time from tics to nanoseconds
   226                                  ;to do this we divide # of tics by top processor spped
   227                                  ;this will give us execution time value in seconds
   228                                  ;
   229 00000136 B800000000              mov rax, 0
   230 0000013B E8(00000000)            call clock_speed            ;function that returns value of max processor speed in xmm0
   231 00000140 F2440F10F8              movsd xmm15, xmm0           ;store max processor speed in xmm15
   232 00000145 F24D0F2AF7              cvtsi2sd xmm14, r15         ;r15 holds exec time, we convert to float in xmm14 to use in calculations
   233 0000014A F2450F5EF7              divsd xmm14, xmm15          ;divide xmm14 by xmm15 (max processor speed) to
   234                                                              ;get execution time in seconds
   235                                  
   236                                  ;get one billion = 1 000 000 000 in xmm13 to multiply by xmm14 to go from seconds to nanoseconds
   237 0000014F 6800CA9A3B              push qword 1000000000
   238 00000154 F2440F2A2C24            cvtsi2sd xmm13, [rsp]
   239 0000015A 58                      pop rax
   240                                  
   241                                  
   242 0000015B B801000000              mov rax, 1
   243 00000160 48BF-                   mov rdi, exec_time               ;"The execution time was %ld which equals ns"
   243 00000162 [F000000000000000] 
   244 0000016A 4D29F7                  sub r15, r14                ;r14 holds original clock time. subtracting r15 by r14 will give us execution time
   245 0000016D 4C89FE                  mov rsi, r15                ;might be some error here. Not sure how having an integer and float in same
   246 00000170 F2450F59F5              mulsd xmm14, xmm13          ;xmm14 holds execution time in nanoseconds now
   247 00000175 F2410F10C6              movsd xmm0, xmm14           ;call will affect things
   248 0000017A E8(00000000)            call printf
   249                                  
   250                                  
   251                                  
   252                                  
   253                                  ;====================================================================================================================================================
   254                                  
   255                                  ;farewell from asm message
   256 0000017F B800000000              mov rax, 0
   257 00000184 48BF-                   mov rdi, farewell_message      ;"Gabriel wishes you a nice day"
   257 00000186 [2400000000000000] 
   258 0000018E E8(00000000)            call printf
   259                                  
   260                                  
   261                                  
   262                                  ;============================================================================================================
   263                                  
   264                                  continue:                     ;invalid input jumps to this part
   265 00000193 F2410F10C6              movsd xmm0, xmm14              ;power return to caller.
   266                                  
   267                                  ;=================================================================================================================
   268                                  
   269                                  
   270                                  ;===== Restore backed up registers ===============================================================================
   271 00000198 9D                      popf                                                        ;Restore rflags
   272 00000199 5B                      pop rbx                                                     ;Restore rbx
   273 0000019A 415F                    pop r15                                                     ;Restore r15
   274 0000019C 415E                    pop r14                                                     ;Restore r14
   275 0000019E 415D                    pop r13                                                     ;Restore r13
   276 000001A0 415C                    pop r12                                                     ;Restore r12
   277 000001A2 415B                    pop r11                                                     ;Restore r11
   278 000001A4 415A                    pop r10                                                     ;Restore r10
   279 000001A6 4159                    pop r9                                                      ;Restore r9
   280 000001A8 4158                    pop r8                                                      ;Restore r8
   281 000001AA 59                      pop rcx                                                     ;Restore rcx
   282 000001AB 5A                      pop rdx                                                     ;Restore rdx
   283 000001AC 5E                      pop rsi                                                     ;Restore rsi
   284 000001AD 5F                      pop rdi                                                     ;Restore rdi
   285 000001AE 5D                      pop rbp                                                     ;Restore rbp
   286                                  
   287 000001AF C3                      ret
   288                                  
   289                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
